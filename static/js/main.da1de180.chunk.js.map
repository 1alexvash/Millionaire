{"version":3,"sources":["images/stonks.jpg","components/Preloader.js","components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preloader","useState","showPreloader","setShowPreloader","setTimeout","className","src","stonks","alt","Graph","graph","returnHome","height","setHeight","window","innerWidth","style","map","data","index","key","length","indexOf","onClick","App","initialSum","setInitialSum","reinvestment","setReinvestment","interest","setInterest","setGraph","onSubmit","e","preventDefault","initSum","graphData","Math","round","push","calculate","htmlFor","type","name","id","placeholder","defaultValue","onChange","parseInt","target","value","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da1de180.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stonks.545f63e3.jpg\";","import React, { useState } from \"react\";\r\nimport stonks from \"../images/stonks.jpg\";\r\n\r\nconst Preloader = () => {\r\n  const [showPreloader, setShowPreloader] = useState(true);\r\n\r\n  setTimeout(() => {\r\n    setShowPreloader(false);\r\n  }, 5000);\r\n\r\n  if (showPreloader) {\r\n    return (\r\n      <div className=\"Preloader\">\r\n        <div className=\"content\">\r\n          <img className=\"stonks\" src={stonks} alt=\"stonks\" />\r\n          <div className=\"progress\">\r\n            <div className=\"bar\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport default Preloader;\r\n","import React, { Fragment, useState } from \"react\";\r\n\r\nconst Graph = ({ graph, returnHome }) => {\r\n  const [height, setHeight] = useState(0);\r\n\r\n  setTimeout(\r\n    () => {\r\n      setHeight(200);\r\n    },\r\n    window.innerWidth > 640 ? 1000 : 1\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Results:</h1>\r\n      <div className=\"Graph\" style={{ height: `${height}px` }}>\r\n        {graph.map((data, index) => (\r\n          <div\r\n            className=\"data\"\r\n            key={index}\r\n            style={{ height: `${(data / graph[graph.length - 1]) * 100}%` }}\r\n          >\r\n            <div className=\"tip\">\r\n              <p>Year: {graph.indexOf(data)}</p>\r\n              <p>Sum: {data}$</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <p className=\"years-to-the-goal\">\r\n        It will take you {graph.length - 1} years to become a millionaire\r\n      </p>\r\n      <button onClick={() => returnHome()} className=\"return\">\r\n        Return\r\n      </button>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import React, { useState, Fragment } from \"react\";\nimport \"./scss/main.css\";\n\nimport Preloader from \"./components/Preloader\";\nimport Graph from \"./components/Graph\";\n\nconst App = () => {\n  const [initialSum, setInitialSum] = useState(50000);\n  const [reinvestment, setReinvestment] = useState(10000);\n  const [interest, setInterest] = useState(10);\n  const [graph, setGraph] = useState([]);\n\n  function calculate(e) {\n    e.preventDefault();\n\n    let initSum = initialSum;\n    let graphData = [initSum];\n    while (initSum < 1000000) {\n      initSum = Math.round(initSum * (1 + interest / 100));\n\n      initSum += reinvestment;\n      graphData.push(initSum);\n    }\n\n    setGraph(graphData);\n  }\n\n  function returnHome() {\n    setGraph([]);\n  }\n\n  return (\n    <div className={`App ${graph.length !== 0 ? \"App-results\" : \"\"}`}>\n      <Preloader />\n      <div className=\"info\">\n        {graph.length === 0 && (\n          <Fragment>\n            <h1>WayToTheFirstMillion</h1>\n            <form onSubmit={e => calculate(e)}>\n              <label htmlFor=\"initialSum\">\n                <p>Initial Sum $</p>\n                <input\n                  type=\"number\"\n                  name=\"\"\n                  id=\"initialSum\"\n                  placeholder=\"50000\"\n                  defaultValue={initialSum}\n                  onChange={e => setInitialSum(parseInt(e.target.value))}\n                />\n              </label>\n              <label htmlFor=\"reinvestment\">\n                <p>Yerly Reinvestment $</p>\n                <input\n                  type=\"number\"\n                  name=\"\"\n                  id=\"reinvestment\"\n                  placeholder=\"10000\"\n                  defaultValue={reinvestment}\n                  onChange={e => setReinvestment(parseInt(e.target.value))}\n                />\n              </label>\n              <label htmlFor=\"interest\">\n                <p>Interest %</p>\n                <input\n                  type=\"number\"\n                  name=\"\"\n                  id=\"interest\"\n                  placeholder=\"10\"\n                  defaultValue={interest}\n                  onChange={e => setInterest(parseInt(e.target.value))}\n                />\n              </label>\n              <button type=\"submit\">Calculate</button>\n            </form>\n          </Fragment>\n        )}\n\n        {graph.length !== 0 && <Graph graph={graph} returnHome={returnHome} />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n/*\n  Add favicon\n  Add manifest\n  Add preloader\n  Add input limits\n  Publish\n  Test\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}